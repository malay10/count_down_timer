{"version":3,"sources":["components/Header.js","containers/DatePicker.jsx","containers/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","Component","background","textAlign","color","padding","DatePicker","onChange","e","year","target","value","substring","month","day","Date","props","updateDate","minHeight","display","alignItem","justifyContent","inputStyle","type","name","this","border","margin","Timer","state","days","hours","minutes","seconds","timerOn","timeCounter","setInterval","updateTime","endDate","eventDate","now","getTime","time","Math","floor","setState","console","log","prevProps","timerOuter","onLoad","timeLeft","timerInner","timerValue","colon","fontSize","fontWeight","paddingBottom","borderBottom","propType","PropTypes","object","isRequired","App","targetDate","setTargetDate","tDate","className","appStyle","React","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d54b6ba8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div style={headerStyle}>\r\n        <h1>Count Down</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#228B22\",\r\n  textAlign: \"center\",\r\n  color: \"#fff\",\r\n  padding: \"0.5rem\",\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropsTypes from \"prop-types\";\r\n// import Timer from './Timer';\r\n\r\nexport class DatePicker extends Component {\r\n  onChange = (e) => {\r\n    //Converting HTML date to js date.\r\n    //NOTE: time is set to 00:00:00 hrs.\r\n    //2020-05-08: format\r\n    const year = e.target.value.substring(0, 4);\r\n    const month = e.target.value.substring(5, 7);\r\n    const day = e.target.value.substring(8, 10);\r\n    let target = new Date(year, month - 1, day);\r\n\r\n    //updating date in parent i.e. App.js\r\n    this.props.updateDate(target);\r\n  };\r\n\r\n  //Date Input\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          minHeight: \"50vh\",\r\n          display: \"flex\",\r\n          alignItem: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div style={inputStyle}>\r\n          <input type=\"date\" name=\"date\" onChange={this.onChange} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Styles\r\nconst inputStyle = {\r\n  border: \"2px solid black\",\r\n  margin: \"auto\",\r\n  padding: \"1rem\",\r\n  display: \"inline\",\r\n};\r\n\r\nDatePicker.propTypes = {\r\n  targetDate: PropsTypes.any.isRequired,\r\n};\r\n\r\nexport default DatePicker;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    days: \"D\",\r\n    hours: \"O\",\r\n    minutes: \"N\",\r\n    seconds: \"E\",\r\n    timerOn: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(\"Done mounting\");\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.eventDate !== this.props.eventDate) {\r\n      this.updateTime();\r\n    } else {\r\n      //this.updateTime();\r\n    }\r\n  }\r\n\r\n  timeCounter = setInterval(() => {\r\n    if (this.state.timerOn) this.updateTime();\r\n  }, 1000);\r\n\r\n  updateTime = () => {\r\n    const endDate = this.props.eventDate;\r\n\r\n    let now = new Date().getTime();\r\n    let time = endDate.getTime() - now;\r\n\r\n    //Calculating time left.\r\n    let days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n    let hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    let minutes = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n    let seconds = Math.floor((time % (1000 * 60)) / 1000);\r\n    // console.log(days + \":\" + hours + \":\" + minutes + \":\" + seconds);\r\n\r\n    //past date is neglected.\r\n    if (endDate < new Date()) {\r\n      this.setState({\r\n        timerOn: false,\r\n        days: \"D\",\r\n        hours: \"O\",\r\n        minutes: \"N\",\r\n        seconds: \"E\",\r\n      });\r\n    }\r\n    //Future Date\r\n    else {\r\n      this.setState({\r\n        days,\r\n        hours,\r\n        minutes,\r\n        seconds,\r\n        timerOn: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"timer \" + this.props.targetDate);\r\n\r\n    return (\r\n      <div style={timerOuter} onLoad={this.timeLeft}>\r\n        <div style={timerInner}>\r\n          <p style={timerValue}>{this.state.days}</p>\r\n          <p>Days</p>\r\n        </div>\r\n        <div style={colon}>: </div>\r\n        <div style={timerInner}>\r\n          <p style={timerValue}>{this.state.hours}</p>\r\n          <p>Hours</p>\r\n        </div>\r\n        <div style={colon}>: </div>\r\n        <div style={timerInner}>\r\n          <p style={timerValue}>{this.state.minutes}</p>\r\n          <p>Minutes</p>\r\n        </div>\r\n        <div style={colon}>: </div>\r\n        <div style={timerInner}>\r\n          <p style={timerValue}>{this.state.seconds}</p>\r\n          <p>seconds</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Styles\r\nconst timerOuter = {\r\n  display: \"flex\",\r\n  background: \"#228B22\",\r\n  color: \"#fff\",\r\n  alignItem: \"center\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst timerInner = {\r\n  padding: \"1rem\",\r\n  margin: \"0 2rem\",\r\n};\r\n\r\nconst colon = {\r\n  padding: \"1.9rem 0\",\r\n  fontSize: \"2rem\",\r\n};\r\n\r\nconst timerValue = {\r\n  fontWeight: \"1000\",\r\n  fontSize: \"1.3rem\",\r\n  paddingBottom: \"0.5rem\",\r\n  borderBottom: \"2px solid #fff\",\r\n};\r\n\r\nTimer.propType = {\r\n  eventDate: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport DatePicker from \"./containers/DatePicker\";\r\nimport Timer from \"./containers/Timer\";\r\n\r\nexport class App extends React.Component {\r\n  state = { targetDate: {} };\r\n\r\n  setTargetDate = (tDate) => {\r\n    this.setState({ targetDate: tDate });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={appStyle}>\r\n        <Header />\r\n        <DatePicker\r\n          targetDate={this.state.targetDate}\r\n          updateDate={this.setTargetDate}\r\n        />\r\n        <Timer eventDate={this.state.targetDate} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst appStyle = {\r\n  height: \"100vh\",\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}